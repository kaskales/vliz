revCompSEQ
revCompSEQ <- tolower(revCompSEQ)
revCompSEQ
forwardSEQ <-  paste(seq, collapse = '')
revCompSEQ <- as.character(reverseComplement( forwardSEQ ) )
revCompSEQ <- tolower(revCompSEQ)
revCompSEQ <- as.character( reverseComplement(forwardSEQ) )
revCompSEQ <- reverseComplement(forwardSEQ)
dna1 <- DNAString("TTGATATGGCCCTTATAA")
translate(dna1)
dna1 <- DNAString("TTGCTGATAATTATCATGGTG")
translate(dna1)
SAureusGC <- getGeneticCode("11") # get bacterial code
altStart <- c("TTG", "CTG", "ATA", "ATT", "ATC", "ATG", "GTG")
for(alt in altStart){ # change alternative codons into start codons
SAureusGC[alt] = "M"
}
translate(dna1,genetic.code = SAureusGC)
sequenceS = strSeq
frame = 1
aaString = translate(sequenceS[frame:seqlen], genetic.code = SAureusGC)
patternSTART = matchPattern("M", aaString)
patternSTOP = matchPattern("*", aaString)
STARTindexes = attr(attr(patternSTART,"ranges"), "start") # get indexes of all values
STOPindexes = attr(attr(patternSTOP,"ranges"), "start") # get indexes of all values
seq <- list[[1]]
typeof(seq)
seqlen <- length(seq)
allStart <- c("ttg", "ctg", "ata", "att", "atc", "atg", "gtg")
allStop <-  c("tga", "taa", "tag")
forwardSEQ <- paste(seq, collapse = '')
forwardSEQ <- forwardSEQ[1]
revCompSEQ <- reverseComplement(DNAString(forwardSEQ))
revCompSEQ <- as.character( revCompSEQ)
revCompSEQ <- tolower(revCompSEQ)
index = c()
for(startcodon in allStart){
thing <- as.vector(gregexpr(paste('(?=',startcodon,')', sep = ''),forwardSEQ,perl=TRUE)[[1]])
index = c(index,thing)
}
codonsStart = data.frame(index)
codonsStart$frame = codonsStart$index %% 3
codonsStart$codon = 'm'
index = c()
for(stopcodon in allStop){
thing <- as.vector(gregexpr(paste('(?=',stopcodon,')', sep = ''),forwardSEQ,perl=TRUE)[[1]])
index = c(index,thing)
}
codonsStop = data.frame(index)
codonsStop$frame = codonsStop$index %% 3
codonsStop$codon = '*'
allcodons = rbind(codonsStart, codonsStop)
frame1 = allcodons[which(allcodons$frame == 1),]
frame1 = frame1[with(frame1, order(index)), ]
frame2 = allcodons[which(allcodons$frame == 2),]
frame2 = frame2[with(frame2, order(index)), ]
frame3 = allcodons[which(allcodons$frame == 0),]
frame3 = frame3[with(frame3, order(index)), ]
146328 + 66786
patternSTART = matchPattern("M", aaString)
patternSTOP = matchPattern("*", aaString)
STARTindexes = attr(attr(patternSTART,"ranges"), "start") # get indexes of all values
STOPindexes = attr(attr(patternSTOP,"ranges"), "start") # get indexes of all values
ALLstarts <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstarts) <- x
ALLstarts <- rbind(ALLstarts, data.frame(index = STARTindexes))
ALLstarts["codon"] = "M"
ALLstops <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstops) <- x
ALLstops <- rbind(ALLstops, data.frame(index = STOPindexes))
ALLstops["codon"] = "*"
ALLss <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("index","codon")
colnames(ALLss) <- x
ALLss <- rbind(ALLstops, ALLstarts)
ALLss <- ALLss[order(ALLss$index),]
lenALL = nrow(ALLss)
min(which(ALLss$codon == "*"))
nextStop = 1
codons = ALLss$codon
newSearchStart = 1
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs <- rbind(ORFs, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
View(ORFs)
ORFs <- data.frame(matrix(ncol = 4, nrow = 0))
ORFs1 <- data.frame(matrix(ncol = 4, nrow = 0))
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs1 <- rbind(ORFs1, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
ORFs <- data.frame(matrix(ncol = 4, nrow = 0))
ORFs2 <- data.frame(matrix(ncol = 4, nrow = 0))
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs1 <- rbind(ORFs1, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
newSearchStart = 1
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs1 <- rbind(ORFs1, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
nextStart = 1
numCodons = nrow(frame1)
while( nextStart < numCodons){
foundStart = min(which(frame1$codon[nextStart:numCodons] == "m"))
if(foundStart == Inf){ break }
foundStop = min(which(frame1$codon[(nextStart+foundStart-1):numCodons] == "*"))
if(foundStop == Inf){ break }
ORFs2 <- rbind(ORFs2, c(frame1[nextStart+foundStart-1,]$index, frame1[nextStart+foundStart-2+foundStop,]$index, 1, 0 ))
nextStart = nextStart + foundStart - 1 + foundStop
}
for(strand in c(0,1)){
if(strand == 0){
sequenceS = strSeq
}else{
sequenceS = reverseComplement(strSeq)
}
for(frame in c(1,2,3)){
aaString = translate(sequenceS[frame:seqlen], genetic.code = SAureusGC)
aaString
patternSTART = matchPattern("M", aaString)
patternSTOP = matchPattern("*", aaString)
STARTindexes = attr(attr(patternSTART,"ranges"), "start") # get indexes of all values
STOPindexes = attr(attr(patternSTOP,"ranges"), "start") # get indexes of all values
ALLstarts <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstarts) <- x
ALLstarts <- rbind(ALLstarts, data.frame(index = STARTindexes))
ALLstarts["codon"] = "M"
ALLstops <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstops) <- x
ALLstops <- rbind(ALLstops, data.frame(index = STOPindexes))
ALLstops["codon"] = "*"
ALLss <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("index","codon")
colnames(ALLss) <- x
ALLss <- rbind(ALLstops, ALLstarts)
ALLss <- ALLss[order(ALLss$index),]
lenALL = nrow(ALLss)
min(which(ALLss$codon == "*"))
nextStop = 1
codons = ALLss$codon
newSearchStart = 1
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs1 <- rbind(ORFs1, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
print(paste("Done ",frame ))
}
}
nrow(ORFs1)
dna1 <- DNAString("TTGATATGGCCCTTATAA")
translate(dna1)
seqlen <- length(seq)
strSeq <-  DNAString( paste(seq, collapse = '') )
stringSEQ  = paste(seq, collapse = '')
ORFs <- data.frame(matrix(ncol = 4, nrow = 0))
SAureusGC <- getGeneticCode("11") # get bacterial code
altStart <- c("TTG", "CTG", "ATA", "ATT", "ATC", "ATG", "GTG")
for(alt in altStart){ # change alternative codons into start codons
SAureusGC[alt] = "M"
}
dna1 <- DNAString("TTGATATGGCCCTTATAA")
translate(dna1)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code
translate(dna1, genetic.code=SGC1)
for(strand in c(0,1)){
if(strand == 0){
sequenceS = strSeq
}else{
sequenceS = reverseComplement(strSeq)
}
for(frame in c(1,2,3)){
aaString = translate(sequenceS[frame:seqlen], genetic.code = SAureusGC)
aaString
patternSTART = matchPattern("M", aaString)
patternSTOP = matchPattern("*", aaString)
STARTindexes = attr(attr(patternSTART,"ranges"), "start") # get indexes of all values
STOPindexes = attr(attr(patternSTOP,"ranges"), "start") # get indexes of all values
ALLstarts <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstarts) <- x
ALLstarts <- rbind(ALLstarts, data.frame(index = STARTindexes))
ALLstarts["codon"] = "M"
ALLstops <- data.frame(matrix(ncol = 1, nrow = 0))
x <- c("index")
colnames(ALLstops) <- x
ALLstops <- rbind(ALLstops, data.frame(index = STOPindexes))
ALLstops["codon"] = "*"
ALLss <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("index","codon")
colnames(ALLss) <- x
ALLss <- rbind(ALLstops, ALLstarts)
ALLss <- ALLss[order(ALLss$index),]
lenALL = nrow(ALLss)
min(which(ALLss$codon == "*"))
nextStop = 1
codons = ALLss$codon
newSearchStart = 1
while(newSearchStart < lenALL &&  min(which(codons[newSearchStart:lenALL] == "M")) != Inf){
nextStart = min(which(codons[newSearchStart:lenALL] == "M"))
codonstart = newSearchStart +nextStart
newSearchStart = codonstart
nextStop = min(which(codons[newSearchStart:lenALL] == "*"))
if(nextStop != Inf ){
newSearchStart = newSearchStart + nextStop
newSearchStart
ORFs <- rbind(ORFs, c(frame,strand, ALLss$index[codonstart-1], ALLss$index[newSearchStart-1] ))
}else{
newSearchStart = lenALL + 10
}
}
print(paste("Done ",frame ))
}
}
x <- c("frame","strand","start_codon","stop_codon")
colnames(ORFs) <- x
ORFs["length"] = ORFs$stop_codon - ORFs$start_codon +1
nrow(ORFs)
length(which(ORFs$length >=10))
length(which(ORFs$length >=50))
length(which(ORFs$length >=100))
length(which(ORFs$length >=300))
length(which(ORFs$length >=500))
View(ORFs)
ORFs["length"] = (ORFs$stop_codon*3) - (ORFs$start_codon*3) +1
nrow(ORFs)
length(which(ORFs$length >=10))
length(which(ORFs$length >=50))
length(which(ORFs$length >=100))
length(which(ORFs$length >=300))
length(which(ORFs$length >=500))
ORFs[which(ORFs$length == max(ORFs$length))]
ORFs[which(ORFs$length == max(ORFs$length)),]
rm(list = ls())
x1s <- c(.5,1,1,2,3,3.5,1,3.5,4,5,5.5,6)
x2s <- c(3.5,1,2.5,2,1,1.2,5.8,3,4,5,4,1)
ys <- c(rep(+1,6), rep(-1,6))
my.data <- data.frame(x1=x1s, x2=x2s, type=ys)
library(e1071)
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
w <- t(svm.model$coefs) %*% svm.model$SV
(b <- -svm.model$rho)
svm.model
View(svm.model)
ys
w
b
(sv = as.matrix(sapply(cbind(my.data[rownames(svm.model$SV),], coef = svm.model$coefs),as.numeric)))
-((sv[,"type"] * (svm.model$SV %*% t(w))) - matrix(rep(1,nrow(svm.model$SV)),,1))
ind = numeric(3)
for(i in 1:3) {
ind[i] = sv[i,'type'] - sum(sv[,'coef'] * sv[,1:2] %*% sv[i,1:2])
}
ind
mean(ind)
b
(5.390244 + 5.365854 ) / 2
x1s <- c(.5,1,1,2,3,3.5)
x2s <- c(3.5,1,2.5,2,1,1.2)
ys <- c(rep(+1,3), rep(-1,3))
my.data <- data.frame(x1=x1s, x2=x2s, type=ys)
library(e1071)
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
w <- t(svm.model$coefs) %*% svm.model$SV
(b <- -svm.model$rho)
% get all support vector information %
(sv = as.matrix(sapply(cbind(my.data[rownames(svm.model$SV),], coef = svm.model$coefs),as.numeric)))
-((sv[,"type"] * (svm.model$SV %*% t(w))) - matrix(rep(1,nrow(svm.model$SV)),,1))
ind = numeric(3)
for(i in 1:3) {
ind[i] = sv[i,'type'] - sum(sv[,'coef'] * sv[,1:2] %*% sv[i,1:2])
}
mean(ind)
x1s <- c(1,2,4,5,6)
x2s <- c(3.5,1,2.5,2,1,1.2)
ys <- c(+1, +1, -1, -1, +1)
my.data <- data.frame(x1=x1s, type=ys)
library(e1071)
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
w <- t(svm.model$coefs) %*% svm.model$SV
(b <- -svm.model$rho)
b
% get all support vector information %
(sv = as.matrix(sapply(cbind(my.data[rownames(svm.model$SV),], coef = svm.model$coefs),as.numeric)))
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
svm.model
View(svm.model)
w
svm.model$coefs
t(svm.model$coefs)
svm.model$SV
svm.model$coefs
svm.model$coefs[1,2] = 1
svm.model$coefs[1,2]
svm.model$coefs[1] = 1
svm.model$coefs[1]
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
svm.model$coefs[1]
svm.model$coefs[2]
svm.model$coefs[1] = 2.5
svm.model$coefs[1] = 2.5 %2%
svm.model$coefs[2] = 4.833 %6%
svm.model$coefs[3] = 0 %4%
svm.model$coefs[4] = -7.333 %5%
w <- t(svm.model$coefs) %*% svm.model$SV
(b <- -svm.model$rho)
svm.model$coefs[1] = 2.5 %2%
svm.model$coefs[2] = 4.833 %6%
svm.model$coefs[3] = 0 %4%
svm.model$coefs[4] = -7.333 %5%
w <- t(svm.model$coefs) %*% svm.model$SV
svm.model$coefs[1] = 2.5 %2%
svm.model$coefs[2] = 4.833 %6%
svm.model$coefs[3] = 0 %4%
svm.model$coefs[4] = -7.333 %5%
w <- t(svm.model$coefs) %*% svm.model$SV
svm.model$coefs[1] = 2.5
svm.model$coefs[2] = 4.833
svm.model$coefs[3] = 0
svm.model$coefs[4] = -7.333
svm.model$coefs
w <- t(svm.model$coefs) %*% svm.model$SV
w
(b <- -svm.model$rho)
% get all support vector information %
(sv = as.matrix(sapply(cbind(my.data[rownames(svm.model$SV),], coef = svm.model$coefs),as.numeric)))
svm.model$SV
rownames(svm.model$SV)
my.data <- data.frame(x1=x1s, type=ys)
my.data
x1s <- c(1,2,4,5,6)
x2s <- c(3.5,1,2.5,2,1,1.2)
ys <- c(+1, +1, -1, -1, +1)
my.data <- data.frame(x1=x1s, type=ys)
library(e1071)
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE)
svm.model$coefs[1] = 2.5
svm.model$coefs[2] = 4.833
svm.model$coefs[3] = 0
svm.model$coefs[4] = -7.333
w <- t(svm.model$coefs) %*% svm.model$SV
w
% get all support vector information %
(sv = as.matrix(sapply(cbind(my.data[rownames(svm.model$SV),], coef = svm.model$coefs),as.numeric)))
my.data
rownames(svm.model$SV)
svm.model$SV
my.data[2,4,5,]
my.data[2,4,5]
% get all support vector information %
(sv = as.matrix(sapply(cbind(my.data[2], coef = svm.model$coefs),as.numeric)))
svm.model <- svm(type ~ ., data=my.data, type='C-classification', kernel='linear',scale=FALSE, cost = 100)
View(svm.model)
shiny::runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
library(RJSONIO)
library(XML)
installed.packages("XML")
library(XML)
install.packages("XML")
#install.packages("XML")
library(XML)
library(http)
library(httr)
get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
View(get_http)
get_http
tempXML_toList <- xmlToList(get_http)
library(xml2)
install.packages("xml2")
doc <- xmlParse( get_http)
a <- xmlToList(doc)
jsonlite::toJSON(a, pretty=TRUE)
a1 <- jsonlite::toJSON(a, pretty=TRUE)
runApp('Documents/vliz/RShiny-Map')
library(jsonlite)
#print("done fetching ")
#get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
#doc <- xmlParse( get_http)
#a <- xmlToList(doc)
#a1 <- jsonlite::toJSON(a, pretty=TRUE)
geojson <- readLines(a, warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
#print("done fetching ")
#get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
#doc <- xmlParse( get_http)
#a <- xmlToList(doc)
#a1 <- jsonlite::toJSON(a, pretty=TRUE)
topoData <- readLines(get_http) %>% paste(collapse = "\n")
#print("done fetching ")
#get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
#doc <- xmlParse( get_http)
#a <- xmlToList(doc)
#a1 <- jsonlite::toJSON(a, pretty=TRUE)
topoData <- a %>% paste(collapse = "\n")
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
#print("done fetching ")
#get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
#doc <- xmlParse( get_http)
#a <- xmlToList(doc)
#a1 <- jsonlite::toJSON(a, pretty=TRUE)
geojson <- a %>% paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
#print("done fetching ")
#get_http <- GET("http://213.122.160.75/scripts/mapserv.exe?map=D:/Websites/MeshAtlantic/map/MESHAtlantic.map&service=wfs&version=1.1.0&request=GetFeature&typeName=EUSM2016_simplified200&srsName=EPSG:4326&bbox=2.122,51.548,3.034,51.428")
#doc <- xmlParse( get_http)
#a <- xmlToList(doc)
#a1 <- jsonlite::toJSON(a, pretty=TRUE)
geojson <- a %>% paste(collapse = "\n")
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leafletProxy('mymap') %>% addGeoJSON(geojson)
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
runApp('Documents/vliz/RShiny-Map')
